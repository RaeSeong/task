평가항목
- 과제는 순서대로 진행합니다.
- 개발에 앞서 해당 과제를 어떻게 접근할지에 대해서 내용 작성하고 commit 합니다.
  home_work_1st.txt
- 과제는 항목당 2시간을  할당하여 진행합니다.
- 처음 1시간 동안 어떻게 접근할지와 초기 개발을 진행해 봅니다.
- 1시간 이내에 해결을 못한다면 어떤 부분을 더 체크해야 할지 체크하고 내용을 작성하여 commit 합니다.
  home_work_1st.txt
- 나머지 1시간동안 부족한 부분을 보완해 봅니다.
- 2시간이 종료되면 어떤 부분을 좀 더 스터디 해야 하는지? 내가 모르는 부분이 무엇인지? 아쉬운 점에 대해서 리뷰하고 commit 합니다.
  home_work_1st.txt
- 이렇게 총 6시간 동안 3개의 과제를 해결하고 제출해주세요.
  home_work_1st.txt
  home_work_2nd.txt
  home_work_3rd.txt
- 만약 해결하지 못한 과제는 7시간 이후 보완하여 제출할 수 있으며 하루를 넘기지 않습니다.
제출방법
Github repository 에 과제 코드 push 확인 하고,
"**cyudfd**", "**hataeyeong**" 사용자 아이디를 해당 repository에 Collaborator로 초대 해주시면 됩니다.
과제비용 필요서류 안내
과제 제출시 합격 유/무와 상관없이 과제비용을 지급해 드립니다(과제 제출시 메일로 제출해주세요)
- 지급액 : 100,000원(세전, 소득세 공제 후 지급)
- 발송 이메일 : jennifer@undefined.gg
- 참조 아매알: charles@undefined.gg
- 신분증(앞/뒤) 사본
	- 통장 사본
프로젝트 구성
<aside> :흰색_확인_표시: 두대의 서버를 실행하면 정상적으로 서버가 연결됩니다.
</aside>
watcher server
node version : v16.4.2
소스파일
watcher 서버는 다른 서버를 감시하는 서버 입니다.
Cluster 기능을 이용하여 2개의 socket-server를 구동합니다.
worker server
node version : v16.4.2
소스파일
서버는 API 역할을 하는 서버 입니다.
worker server의 Cluster Master는 socket-client를 이용하여 watcher server에 접속합니다.
worker server는 Cluster 기능을 이용하여 2개의 API 서버를 구동합니다.
(실제 Demo에서는 API 서버 내용은 포함되지 않습니다.)
과제
설치: 서버별 소스 설치 및 구동
watcher.zip
work1.zip
첫번째 과제:
watcher server를 종료합니다.
현재는 소켓이 종료되면 1ms 주기로 재접속을 시도합니다.
이런경우 watcher server에 다수의 서버가 동일한 로직으로 재접속을 시도하면 watcher server가 live상태가 될때 일시에 접속이 몰려 접속 부담이 생길 수 있습니다.
이에 각 서버가 재접속 시도를 50 ~ 150ms 사이에서 랜덤 값을 부여하여 재접속 시도합니다.
랜덤 값을 통해 재접속 시도가 10번을 초과 실패하면 이후 10초 간격으로 시도합니다.
두번째 과제:
현재 watcher server는 최초 지정된 process를 지정된 숫자 만큼 socket-server가 생성하게 프로그래밍 되어 있습니다.
비정상적인 상황으로 예상하지 못한 process중 하나가 5초 뒤 자동으로 죽게됩니다.
//app.js 주석을 해제하면 작동하며 첫번째 과제를 해결하고 주석을 해제하고 과제를 풀어주세요.
ClusterUtil.serverDownTest(5000, 1);
이런 경우 만약 worker-server가 죽은 process의 서버에 접속했다면 재접속을 시도하여 다른 프로세스에 접속을 시도할 것입니다.
만약 운 좋게 죽은 서버에 접속하지 않았다면 아무런 문제는 발생하지 않습니다.
하지만 이대로 두면 서버의 자원이 매우 비효율적으로 운영될 수 있으며 소켓서버가 하나만 작동하여 서버당 접속할 수 있는 유저수가 제한 될 것 같습니다.
app.js에 프로세스가 죽을 경우 다시 살아날 수 있게 고도화를 합니다.
만약 ClusterUtil.serverDownTest(5000, 5); 시도할 경우 5번 모두 좀비 처럼 다시 살아나야 합니다.
세번째 과제:
worker server는 Cluster를 이용하여 2개의 app_router.js process를 생성합니다.
app_router.js는 최초 sw 변수를 지정하여 0으로 초기화합니다.
worker server는 watcher server에 접속을 성공하면 watcher server의 socketServer.js 에서 3초 뒤 worker서버에게 sw 변수를 1로 변경하는 통신을 하게 됩니다. ws.send(JSON.stringify({message: null}));
이때 worker server는 Cluster Master process가 연락을 받기 때문에 자식 process에게 연락을 취할 방법이 필요합니다.
이를 고도화 하여 자식 app_router.js 자식 process의 변수 sw를 1로 변경해주세요.







